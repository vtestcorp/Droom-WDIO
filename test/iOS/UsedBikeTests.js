const base = require("../../BaseClass/base");
const usedbikepage = require("../../Pages/iOS/usedbikepage");

describe('Used Bike', async () => {
    it('TC_01 Verify Bike option is the display with used Condition to the buyer', async () => {
        await base.skipStartup()
        await base.iosLoginAsBuyer()
        expect (await usedbikepage.createReq).isDisplayed()
        console.log('Create Requirement Button is Displayed')
        await (await usedbikepage.createReq).click()
        console.log("Clicked on Create Requirement Button")
        expect (await usedbikepage.headingSelectPage).isDisplayed()
        console.log("Select Heading Displayed As:"+await(await UsedCarPage.headingSelectPage).getText())
        expect (await usedbikepage.bikeOption).isDisplayed()
        console.log('Bike option Displayed Under I am looking for ')
        expect (await usedbikepage.usedButton).isDisplayed()
        console.log('Used Option is displayed under Condition')
    });
    it('Tc_02 Verify user able to select location using location option', async () => {
        await usedbikepage.cLocation()
        expect(await usedbikepage.currentLocation).toBeDisplayed()
        console.log('Current Location displayed')
    });
        it('TC_03 Verify error message without entering location', async () => {
        await Base.iosLoginAsBuyer()
        await (await usedbikepage.createReq).click()
        console.log("Clicked On Create Requirement")
        expect (await usedbikepage.createReq).toBeDisabled()
        console.log("Select Heading Displayed As:"+await(await usedbikepage.headingSelectPage).getText())
        await usedbikepage.bikeCondition()  
        await usedbikepage.clickOnNext()
        expect(usedbikepage.errorMsg).toBeDisplayed()
        console.log('Error message Displayed')
    });
    it('Tc_04 Verify user able to select Bike model from Entering your vehicle details as per requirement', async () => {
        await base.iosLoginAsBuyer()
        expect (await usedbikepage.createReq).isDisplayed()
        console.log('Create Requirement Button is Displayed')
        await (await usedbikepage.createReq).click()
        console.log("Clicked on Create Requirement Button")
        expect (await usedbikepage.headingSelectPage).isDisplayed()
        console.log("Select Heading Displayed As:"+await(await UsedCarPage.headingSelectPage).getText())
        expect(await usedbikepage.Bike).isDisplayed()
        console.log("Bike option is displayed")
        await(await usedbikepage.Bike).click()
        console.log("Clicked On Bike Option")
        expect(await usedbikepage.nextButton).isDisplayed()
        console.log("Next Button is displayed")
        await(await usedbikepage.nextButton).click()
        console.log("Clicked On Next Button")
        expect (await usedbikepage.findBike).isDisplayed()
        console.log("Find Dream Bike Heading Displayed As:"+await(await UsedCarPage.findBike).getText())
        expect (await usedbikepage.searchField).toBeClickable()
        console.log("User can select Bike using Search Field")
    });
    it('Tc_05 Verify user able to select bike model through select from the dropdown as per requirement', async () => {
        await base.iosLoginAsBuyer()
        expect (await usedbikepage.createReq).isDisplayed()
        console.log('Create Requirement Button is Displayed')
        await (await usedbikepage.createReq).click()
        console.log("Clicked on Create Requirement Button")
        expect (await usedbikepage.headingSelectPage).isDisplayed()
        console.log("Select Heading Displayed As:"+await(await UsedCarPage.headingSelectPage).getText())
        expect(await usedbikepage.Bike).isDisplayed()
        console.log("Bike option is displayed")
        await(await usedbikepage.Bike).click()
        console.log("Clicked On Bike Option")
        expect(await usedbikepage.nextButton).isDisplayed()
        console.log("Next Button is displayed")
        await(await usedbikepage.nextButton).click()
        console.log("Clicked On Next Button")
        expect (await usedbikepage.droomSugg).isDisplayed()
        console.log("Droom Suggestyions Link Displayed As:"+await(await UsedCarPage.droomSugg).getText())
        await(await usedbikepage.nextButton).click()
        console.log("Clicked On Next Button")
        expect(await usedbikepage.bodyTypeOnsugg).toBeDisplayed()
        console.log("Body Type displayed")
        expect(await usedbikepage.sportsBike).toBeDisplayed()
        console.log("Sports Bike option is displayed")
        console.log('successfully bike selected from dropdown')
    });
    it('Tc_06 Verify user able to select bike model through Let Droom Suggest for you as per requirement', async () => {
        await base.iosLoginAsBuyer()
        expect (await usedbikepage.createReq).isDisplayed()
        console.log('Create Requirement Button is Displayed')
        await (await usedbikepage.createReq).click()
        console.log("Clicked on Create Requirement Button")
        expect (await usedbikepage.headingSelectPage).isDisplayed()
        console.log("Select Heading Displayed As:"+await(await UsedCarPage.headingSelectPage).getText())
        expect(await usedbikepage.Bike).isDisplayed()
        console.log("Bike option is displayed")
        await(await usedbikepage.Bike).click()
        console.log("Clicked On Bike Option")
        expect(await usedbikepage.nextButton).isDisplayed()
        console.log("Next Button is displayed")
        await(await usedbikepage.nextButton).click()
        console.log("Clicked On Next Button")
        expect (await usedbikepage.droomSugg).isDisplayed()
        console.log("Droom Suggestyions Link Displayed As:"+await(await UsedCarPage.droomSugg).getText())
        await(await usedbikepage.nextButton).click()
        console.log("Clicked On Next Button")
        expect(await  usedbikepage.budget).toBeDisplayed()
        console.log('What is Your Budget? option Display')
    });

/*
    it('Tc_07 Verify user able to select use bike as per the budget', async () => {
        browser.url('/')
        await usedbikepage.clickOnSubmitRequirements()
        await (await usedbikepage.currentLocation).click()
        await (await usedbikepage.used).click()
        await (await usedbikepage.Bike).click()
        await usedbikepage.clickOnNext()
        await usedbikepage.slectFromDropDown()
        await usedbikepage.selectBikeVehicle()
        await usedbikepage.clickOnNext()
        expect(await usedbikepage.bikeName).toBeDisplayed()
        expect(await usedbikepage.addBtn).toBeDisplayed()
        await (await usedbikepage.budgetBar).moveTo()
        await (await usedbikepage.budgetBar).click()
        await usedbikepage.clickOnNext()
        await usedbikepage.selectDoYouAlsoNeed()
        await usedbikepage.clickOnNext()
        expect(await usedbikepage.almostDone).toBeDisplayed()
        await usedbikepage.clickOnSubmit()
        await usedbikepage.clickOngetRequirements()
        expect(await usedbikepage.priceRange).toBeDisplayed()
        console.log(await (await usedbikepage.priceRange).getText()) 
        expect(await usedbikepage.newRequirements).toBeDisplayed()
    });
    it('Tc_08 Verify user able to select use bike as per the KMS Driven Range', async () => {
        browser.url('/')
        await usedbikepage.clickOnSubmitRequirements()
        await (await usedbikepage.currentLocation).click()
        await (await usedbikepage.used).click()
        await (await usedbikepage.Bike).click()
        await usedbikepage.clickOnNext()
        await usedbikepage.slectFromDropDown()
        await usedbikepage.selectBikeVehicle()
        await usedbikepage.clickOnNext()
        expect(await usedbikepage.bikeName).toBeDisplayed()
        expect(await usedbikepage.addBtn).toBeDisplayed()
        await (await usedbikepage.Kmsbar).moveTo()
        await (await usedbikepage.Kmsbar).click()
        await usedbikepage.clickOnNext()
        await usedbikepage.selectDoYouAlsoNeed()
        await usedbikepage.clickOnNext()
        expect(await usedbikepage.almostDone).toBeDisplayed()
        await usedbikepage.clickOnSubmit()
        await usedbikepage.clickOngetRequirements()
        expect(await usedbikepage.kmsrange).toBeDisplayed()
        console.log(await (await usedbikepage.kmsrange).getText())
        expect(await usedbikepage.newRequirements).toBeDisplayed()
    });
    it('Tc_09 Verify user able to select use bike as per the Color', async () => {
        browser.url('/')
        await usedbikepage.clickOnSubmitRequirements()
        await (await usedbikepage.currentLocation).click()
        await (await usedbikepage.used).click()
        await (await usedbikepage.Bike).click()
        await usedbikepage.clickOnNext()
        await usedbikepage.slectFromDropDown()
        await usedbikepage.selectBikeVehicle()
        await usedbikepage.clickOnNext()
        await usedbikepage.basicDetailsDisplay()
        expect(await usedbikepage.budget).toBeDisplayed()
        await usedbikepage.selectColorFromList()
        await usedbikepage.clickOnNext()
        await usedbikepage.clickOnNext()
        expect(await usedbikepage.almostDone).toBeDisplayed()
        await usedbikepage.clickOnSubmit()
        await usedbikepage.clickOngetRequirements()
        expect(await usedbikepage.extColor).toBeDisplayed()
        console.log(await (await usedbikepage.extColor).getText())
        expect(await usedbikepage.newRequirements).toBeDisplayed()
    });
    it('Tc_10 Verify user able to select use bike as per the Do you also need option', async () => {
        browser.url('/')
        await usedbikepage.clickOnSubmitRequirements()
        await (await usedbikepage.currentLocation).click()
        await (await usedbikepage.used).click()
        await (await usedbikepage.Bike).click()
        await usedbikepage.clickOnNext()
        await usedbikepage.slectFromDropDown()
        await usedbikepage.selectBikeVehicle()
        await usedbikepage.clickOnNext()
        expect(await usedbikepage.bikeName).toBeDisplayed()
        expect(await usedbikepage.addBtn).toBeDisplayed()
        await usedbikepage.selectColorFromList()
        await usedbikepage.clickOnNext()
        await usedbikepage.selectDoYouAlsoNeed()
        await usedbikepage.clickOnNext()
        expect(await usedbikepage.almostDone).toBeDisplayed()
        await usedbikepage.clickOnSubmit()
        await usedbikepage.clickOngetRequirements()
        expect(await usedbikepage.service).toBeDisplayed()
        console.log(await (await usedbikepage.service).getText())
        expect(await usedbikepage.newRequirements).toBeDisplayed()
    });
    it('Tc_11 Verify user is able to select use bike as per the How Quickly Do You Want to Buy? option', async () => {
        browser.url('/')
        await usedbikepage.clickOnSubmitRequirements()
        await (await usedbikepage.currentLocation).click()
        await (await usedbikepage.used).click()
        await (await usedbikepage.Bike).click()
        await usedbikepage.clickOnNext()
        await usedbikepage.slectFromDropDown()
        await usedbikepage.selectBikeVehicle()
        await usedbikepage.clickOnNext()
        expect(await usedbikepage.bikeName).toBeDisplayed()
        expect(await usedbikepage.addBtn).toBeDisplayed()
        await usedbikepage.selectColorFromList()
        await usedbikepage.clickOnNext()
        await usedbikepage.selectDoYouAlsoNeed()
        await usedbikepage.selectHowQuickly()
        await usedbikepage.clickOnNext()
        expect(await usedbikepage.almostDone).toBeDisplayed()
        await usedbikepage.clickOnSubmit()
        await (await usedbikepage.requirements).click()
        expect(await usedbikepage.needToBuy).toBeDisplayed()
        console.log(await (await usedbikepage.needToBuy).getText())
        expect(await usedbikepage.newRequirements).toBeDisplayed()
    });
   
    it('Tc_12 Validation for match count while req creation and in req page', async () => {
        browser.url('/')
        await usedbikepage.clickOnSubmitRequirements()
        await (await usedbikepage.currentLocation).click()
        await (await usedbikepage.used).click()
        await (await usedbikepage.Bike).click()
        await usedbikepage.clickOnNext()
        await usedbikepage.slectFromDropDown()
        await usedbikepage.selectBikeVehicle()
        await usedbikepage.clickOnNext()
        expect(await usedbikepage.bikeName).toBeDisplayed()
        expect(await usedbikepage.addBtn).toBeDisplayed()
        await usedbikepage.selectColor()
        await usedbikepage.clickOnNext()
        await usedbikepage.clickOnNext()
        expect(await usedbikepage.almostDone).toBeDisplayed()
        await usedbikepage.clickOnSubmit()
        await usedbikepage.clickOngetRequirements()
        expect(await usedbikepage.newRequirements).toBeDisplayed()
    });
    it('Tc_13 Verify user is able to select use bike as per the Do You Wish to Exchange Your Vehicle option', async () => {
        browser.url('/')
        await usedbikepage.clickOnSubmitRequirements()
        await (await usedbikepage.currentLocation).click()
        await (await usedbikepage.used).click()
        await (await usedbikepage.Bike).click()
        await usedbikepage.clickOnNext()
        await usedbikepage.slectFromDropDown()
        await usedbikepage.selectBikeVehicle()
        await usedbikepage.clickOnNext()
        expect(await usedbikepage.bikeName).toBeDisplayed()
        expect(await usedbikepage.addBtn).toBeDisplayed()
        await usedbikepage.clickOnNext()
        await usedbikepage.selectDoYouAlsoNeed()
        await usedbikepage.selectHowQuickly()
        await usedbikepage.exchangeVehicle()
        await (await usedbikepage.clickOnCar).click()
        await expect(await usedbikepage.bikeOption).toBeDisplayed()
        await expect(await usedbikepage.scooterOption).toBeDisplayed()
        await (await usedbikepage.bikeOption).click()
        await usedbikepage.selectBikeVehicle()
        await usedbikepage.Enterkms()
        await usedbikepage.clickOnNext()
        expect(await usedbikepage.almostDone).toBeDisplayed()
        await usedbikepage.clickOnSubmit()
        await usedbikepage.clickOngetRequirements()
        expect(await usedbikepage.newRequirements).toBeDisplayed()
    });*/
});